<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neksus Snake Game</title>
    <style>
        body {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }

        #game-board {
            position: relative;
            width: 400px;
            height: 400px;
            border: 1px solid #ccc;
        }

        .snake, .food {
            position: absolute;
            background-color: #333;
        }

        .food {
            background-color: red;
        }

        .controls {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }

        .control-button {
            padding: 10px;
            margin: 0 10px;
            font-size: 16px;
            cursor: pointer;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div id="game-board"></div>

    <div class="controls">
        <div class="control-button" onclick="changeDirection('UP')">↑</div>
    </div>
    <div class="controls">
        <div class="control-button" onclick="changeDirection('LEFT')">←</div>
        <div class="control-button" onclick="changeDirection('DOWN')">↓</div>
        <div class="control-button" onclick="changeDirection('RIGHT')">→</div>
    </div>

    <script>
        const board = document.getElementById('game-board');
        const gridSize = 20;
        const snakeSize = 20;

        let snake = [{ x: 10, y: 10 }];
        let food = generateFood();

        function generateFood() {
            const x = Math.floor(Math.random() * gridSize);
            const y = Math.floor(Math.random() * gridSize);
            return { x, y };
        }

        function draw() {
            board.innerHTML = '';

            snake.forEach(segment => {
                const snakeSegment = document.createElement('div');
                snakeSegment.style.width = snakeSegment.style.height = `${snakeSize}px`;
                snakeSegment.style.left = `${segment.x * snakeSize}px`;
                snakeSegment.style.top = `${segment.y * snakeSize}px`;
                snakeSegment.classList.add('snake');
                board.appendChild(snakeSegment);
            });

            const foodElement = document.createElement('div');
            foodElement.style.width = foodElement.style.height = `${snakeSize}px`;
            foodElement.style.left = `${food.x * snakeSize}px`;
            foodElement.style.top = `${food.y * snakeSize}px`;
            foodElement.classList.add('food');
            board.appendChild(foodElement);
        }

        function update() {
            const head = { ...snake[0] };
            switch (direction) {
                case 'UP':
                    head.y -= 1;
                    break;
                case 'DOWN':
                    head.y += 1;
                    break;
                case 'LEFT':
                    head.x -= 1;
                    break;
                case 'RIGHT':
                    head.x += 1;
                    break;
            }

            if (isCollision(head, snake) || head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize) {
                alert('Oyun Bitti!');
                resetGame();
                return;
            }

            if (head.x === food.x && head.y === food.y) {
                snake.unshift(food);
                food = generateFood();
            } else {
                snake.pop();
            }

            snake.unshift(head);

            draw();
        }

        function isCollision(point, array) {
            return array.some(p => p.x === point.x && p.y === point.y);
        }

        function resetGame() {
            snake = [{ x: 10, y: 10 }];
            food = generateFood();
            direction = 'RIGHT';
            draw();
        }

        let direction = 'RIGHT';

        function changeDirection(newDirection) {
            direction = newDirection;
        }

        setInterval(update, 100);
    </script>
</body>
</html>
